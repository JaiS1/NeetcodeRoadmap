#217. Contains Duplicate
#Time Complexity O(n)
#Space Complexity O(n)
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        hashset = set()
        for n in nums:
            if n in hashset:
                return True
            hashset.add(n)
        return False

#===================================================================================================

#242. Valid Anagram
#Time Complexity O(s + t) where s is length of s, t is length of t
#Space Complexity O(s + t) where s is length of s, t is length of t
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False

        countS, countT = {}, {}

        for i in range(len(s)):
            countS[s[i]] = 1 + countS.get(s[i], 0)
            countT[t[i]] = 1 + countT.get(t[i], 0)
        return countS == countT
    
#242. IMPROVED VERSION WITH O(1) MEMORY
#Sort the strings first, then compare, but time complexity will be O(nlogn)
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)

        
#===================================================================================================

#1. Two Sum
#Time Complexity O(n)
#Space Complexity O(n)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        prevMap = {}  # val -> index
        for i, n in enumerate(nums):
            diff = target - n
            if diff in prevMap:
                return [prevMap[diff], i]
            prevMap[n] = i

#===================================================================================================

#49. Group Anagrams
#Bad Ideas: Sort each string then compare, do this for every string. 
#           Time Complexity: O(m * nlogn) where m is number of strings, n is average length of each string
#Best Idea: Have a HashMap where the Key is "1 e, 1 a, 1 t" then the value is ["eat", "tea", "ate"]. Know that the limit is 26 letters. 
#           Time Complexity: O(m * n * 26) where m is number of strings, n is average length of each string
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        ans = collections.defaultdict(list)

        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord("a")] += 1 #ord() returns the unicode of the character, ord("a") = 97 so minus 97 to get the index
            ans[tuple(count)].append(s)
        return ans.values()

#===================================================================================================

#347. Top K Frequent Elements
#Time Complexity O(n), if you tried using a heap it would be O(klogn)
#Space Complexity O(n), n + n technically
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        count = {}
        freq = [[] for i in range(len(nums) + 1)]

        for n in nums:
            count[n] = 1 + count.get(n, 0)
        for n, c in count.items():
            freq[c].append(n)

        res = []
        for i in range(len(freq) - 1, 0, -1):
            for n in freq[i]:
                res.append(n)
                if len(res) == k:
                    return res
                
#===================================================================================================

#238. Product of Array Except Self
#NOTE: No division allowed
#Could do this in O(n) time and O(n) space by using two arrays, one for prefix and postfix products
#But instead do two passes, multiply the prefix products, then multiply the postfix products in the output array
#Time Complexity O(n)
#Space Complexity O(1)

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1] * (len(nums))

        prefix = 1
        for i in range(len(nums)):
            res[i] = prefix
            prefix *= nums[i]
        postfix = 1
        for i in range(len(nums) - 1, -1, -1):
            res[i] *= postfix
            postfix *= nums[i]
        return res
    

#===================================================================================================

#36. Valid Sudoku
# Time Complexity: O(9^2) = O(1) since it's a 9x9 board
# Space Complexity: O(9^2) = O(1) since it's a 9x9 board
import collections
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        cols = collections.defaultdict(set)
        rows = collections.defaultdict(set)
        squares = collections.defaultdict(set)  # key = (r /3, c /3)

        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    continue
                if (
                    board[r][c] in rows[r]
                    or board[r][c] in cols[c]
                    or board[r][c] in squares[(r // 3, c // 3)]
                ):
                    return False
                cols[c].add(board[r][c])
                rows[r].add(board[r][c])
                squares[(r // 3, c // 3)].add(board[r][c])
        return True

#===================================================================================================

#659. Encode and Decode Strings
#Can't just have delimiter, because if the string has the delimiter in it, it will be split
#So have length of string, then delimiter, then string
#Time Complexity O(n) for Encode and Decode
class Solution:
    def encode(self, strs):
        res = ""
        for s in strs:
            res += str(len(s)) + "#" + s
        return res

    def decode(self, s):
        res, i = [], 0

        while i < len(s):
            j = i
            while s[j] != "#":
                j += 1
            length = int(s[i:j])
            res.append(s[j + 1 : j + 1 + length])
            i = j + 1 + length
        return res
    
#===================================================================================================

#128. Longest Consecutive Sequence
#Bad Idea: Sort and then do it, but that would be O(nlogn)
#Best Idea: Use a set to store all the numbers, then for each number, check if it's the start of a sequence
#Time Complexity O(n)
#Space Complexity O(n)
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        numSet = set(nums)
        longest = 0
        for n in nums:
            # check if its the start of a sequence
            if (n - 1) not in numSet:
                length = 1
                while (n + length) in numSet:
                    length += 1
                longest = max(length, longest)
        return longest


